module SkelMUDA where

-- Haskell module generated by the BNF converter

import AbsMUDA
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transCFloat :: CFloat -> Result
transCFloat x = case x of
  CFloat str  -> failure x


transCDouble :: CDouble -> Result
transCDouble x = case x of
  CDouble str  -> failure x


transHexadecimal :: Hexadecimal -> Result
transHexadecimal x = case x of
  Hexadecimal str  -> failure x


transProg :: Prog -> Result
transProg x = case x of
  Program strucs funcs  -> failure x


transStruc :: Struc -> Result
transStruc x = case x of
  Struct id mdecs  -> failure x


transMDec :: MDec -> Result
transMDec x = case x of
  MDecl typ id  -> failure x


transFunc :: Func -> Result
transFunc x = case x of
  Fun funcspecs typ id formaldecs stms  -> failure x


transFuncSpec :: FuncSpec -> Result
transFuncSpec x = case x of
  InlineFuncSpec  -> failure x
  ForceInlineFuncSpec  -> failure x
  AlwaysInlineFuncSpec  -> failure x
  StaticFuncSpec  -> failure x


transFormalDec :: FormalDec -> Result
transFormalDec x = case x of
  FormalDecl quals typ id  -> failure x


transDecInit :: DecInit -> Result
transDecInit x = case x of
  DeclInit id decinitexps  -> failure x


transDecInitExp :: DecInitExp -> Result
transDecInitExp x = case x of
  DExp exp  -> failure x


transQual :: Qual -> Result
transQual x = case x of
  InputQual  -> failure x
  OutputQual  -> failure x
  InOutQual  -> failure x
  ArrayQual  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SDecl typ decinits  -> failure x
  SAssign id exp  -> failure x
  SAssignWithField id fields exp  -> failure x
  SAssignWithArray id exp0 exp  -> failure x
  SExp exp  -> failure x
  SBlock stms  -> failure x
  SWhile exp stm  -> failure x
  SIf exp stms0 stms  -> failure x
  SReturn exp  -> failure x
  SReturnVoid  -> failure x
  SNew id n  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAnd exp0 exp  -> failure x
  EOr exp0 exp  -> failure x
  EXor exp0 exp  -> failure x
  ENot exp0 exp  -> failure x
  EEq exp0 exp  -> failure x
  ENeq exp0 exp  -> failure x
  EGt exp0 exp  -> failure x
  EGte exp0 exp  -> failure x
  ELt exp0 exp  -> failure x
  ELte exp0 exp  -> failure x
  ESlElemWise exp0 exp  -> failure x
  ESrElemWise exp0 exp  -> failure x
  ESlaElemWise exp0 exp  -> failure x
  ESraElemWise exp0 exp  -> failure x
  ESlQWord exp0 exp  -> failure x
  ESrQWord exp0 exp  -> failure x
  ESlaQWord exp0 exp  -> failure x
  ESraQWord exp0 exp  -> failure x
  EAdd exp0 exp  -> failure x
  ESub exp0 exp  -> failure x
  EMul exp0 exp  -> failure x
  EDiv exp0 exp  -> failure x
  EDivApprox exp0 exp  -> failure x
  ENeg exp  -> failure x
  EFieldSelect exp fields  -> failure x
  EArray exp0 exp  -> failure x
  EFunc id funcargss  -> failure x
  EIdent id  -> failure x
  EInt n  -> failure x
  EDouble d  -> failure x
  ECFloat cfloat  -> failure x
  EHexadec hexadecimal  -> failure x


transFuncArgs :: FuncArgs -> Result
transFuncArgs x = case x of
  EArg exp  -> failure x


transField :: Field -> Result
transField x = case x of
  EField id  -> failure x


transTyp :: Typ -> Result
transTyp x = case x of
  TName id  -> failure x




module AbsMUDA where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
newtype CFloat = CFloat String deriving (Eq,Ord,Show)
newtype CDouble = CDouble String deriving (Eq,Ord,Show)
newtype Hexadecimal = Hexadecimal String deriving (Eq,Ord,Show)
data Prog =
   Program [Struc] [Func]
  deriving (Eq,Ord,Show)

data Struc =
   Struct Ident [MDec]
  deriving (Eq,Ord,Show)

data MDec =
   MDecl Typ Ident
  deriving (Eq,Ord,Show)

data Func =
   Fun [FuncSpec] Typ Ident [FormalDec] [Stm]
  deriving (Eq,Ord,Show)

data FuncSpec =
   InlineFuncSpec
 | ForceInlineFuncSpec
 | AlwaysInlineFuncSpec
 | StaticFuncSpec
  deriving (Eq,Ord,Show)

data FormalDec =
   FormalDecl [Qual] Typ Ident
  deriving (Eq,Ord,Show)

data DecInit =
   DeclInit Ident [DecInitExp]
  deriving (Eq,Ord,Show)

data DecInitExp =
   DExp Exp
  deriving (Eq,Ord,Show)

data Qual =
   InputQual
 | OutputQual
 | InOutQual
 | ArrayQual
  deriving (Eq,Ord,Show)

data Stm =
   SDecl Typ [DecInit]
 | SAssign Ident Exp
 | SAssignWithField Ident [Field] Exp
 | SAssignWithArray Ident Exp Exp
 | SExp Exp
 | SBlock [Stm]
 | SWhile Exp Stm
 | SIf Exp [Stm] [Stm]
 | SReturn Exp
 | SReturnVoid
 | SNew Ident Integer
  deriving (Eq,Ord,Show)

data Exp =
   EAnd Exp Exp
 | EOr Exp Exp
 | EXor Exp Exp
 | ENot Exp Exp
 | EEq Exp Exp
 | ENeq Exp Exp
 | EGt Exp Exp
 | EGte Exp Exp
 | ELt Exp Exp
 | ELte Exp Exp
 | ESlElemWise Exp Exp
 | ESrElemWise Exp Exp
 | ESlaElemWise Exp Exp
 | ESraElemWise Exp Exp
 | ESlQWord Exp Exp
 | ESrQWord Exp Exp
 | ESlaQWord Exp Exp
 | ESraQWord Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EDivApprox Exp Exp
 | ENeg Exp
 | EFieldSelect Exp [Field]
 | EArray Exp Exp
 | EFunc Ident [FuncArgs]
 | EIdent Ident
 | EInt Integer
 | EDouble Double
 | ECFloat CFloat
 | EHexadec Hexadecimal
  deriving (Eq,Ord,Show)

data FuncArgs =
   EArg Exp
  deriving (Eq,Ord,Show)

data Field =
   EField Ident
  deriving (Eq,Ord,Show)

data Typ =
   TName Ident
  deriving (Eq,Ord,Show)

